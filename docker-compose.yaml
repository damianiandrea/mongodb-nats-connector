version: "3.8"

services:
  mongo1:
    depends_on:
      - mongo2
      - mongo3
    image: mongo:${MONGO_VERSION}
    container_name: mongo1
    hostname: mongo1
    networks:
      - connector-net
    ports:
      - "27017:27017"
    command: [ "--replSet", "mongodb-nats-connector", "--bind_ip_all" ]
    deploy:
      restart_policy:
        condition: on-failure
    healthcheck:
      test: test $$(echo "rs.initiate({_id:\"mongodb-nats-connector\",members:[{_id:0,host:\"mongo1:27017\"},{_id:1,host:\"mongo2:27017\"},{_id:2,host:\"mongo3:27017\"}]}).ok || rs.status().ok" | mongosh --port 27017 --quiet) -eq 1
      interval: 10s
      start_period: 30s
  mongo2:
    image: mongo:${MONGO_VERSION}
    container_name: mongo2
    hostname: mongo2
    networks:
      - connector-net
    ports:
      - "27018:27017"
    command: [ "--replSet", "mongodb-nats-connector", "--bind_ip_all" ]
    deploy:
      restart_policy:
        condition: on-failure
  mongo3:
    image: mongo:${MONGO_VERSION}
    container_name: mongo3
    hostname: mongo3
    networks:
      - connector-net
    ports:
      - "27019:27017"
    command: [ "--replSet", "mongodb-nats-connector", "--bind_ip_all" ]
    deploy:
      restart_policy:
        condition: on-failure
  nats1:
    image: nats:2.10-alpine
    container_name: nats1
    networks:
      - connector-net
    ports:
      - "4222:4222"
      - "8222:8222"
    command: "--name nats1 --cluster_name NATS --js --sd /data --cluster nats://0.0.0.0:6222 --routes nats://nats2:6222,nats://nats3:6222 --http_port 8222"
    deploy:
      restart_policy:
        condition: on-failure
  nats2:
    image: nats:2.10-alpine
    container_name: nats2
    networks:
      - connector-net
    command: "--name nats2 --cluster_name NATS --js --sd /data --cluster nats://0.0.0.0:6222 --routes nats://nats1:6222,nats://nats3:6222"
    deploy:
      restart_policy:
        condition: on-failure
  nats3:
    image: nats:2.10-alpine
    container_name: nats3
    networks:
      - connector-net
    command: "--name nats3 --cluster_name NATS --js --sd /data --cluster nats://0.0.0.0:6222 --routes nats://nats1:6222,nats://nats2:6222"
    deploy:
      restart_policy:
        condition: on-failure
  connector:
    depends_on:
      - mongo1
      - nats1
    build:
      context: .
    image: damianiandrea/mongodb-nats-connector:latest
    container_name: connector
    networks:
      - connector-net
    volumes:
      - "./example:/root/config"
    ports:
      - "8080:8080"
    environment:
      - CONFIG_FILE=/root/config/connector.yaml
      - MONGO_URI=mongodb://mongo1:27017,mongo2:27017,mongo3:27017/?replicaSet=mongodb-nats-connector
      - NATS_URL=nats://nats1:4222
      - SERVER_ADDR=:8080
    deploy:
      restart_policy:
        condition: on-failure
  connector-it:
    depends_on:
      - connector
    build:
      context: .
      dockerfile: Dockerfile.it
    image: connector-it:latest
    container_name: connector-it
    networks:
      - connector-net
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      - MONGO_URI=mongodb://mongo1:27017,mongo2:27017,mongo3:27017/?replicaSet=mongodb-nats-connector
      - MONGO_VERSION=${MONGO_VERSION}
      - NATS_URL=nats://nats1:4222
      - CONNECTOR_URL=http://connector:8080

networks:
  connector-net:
    driver: bridge